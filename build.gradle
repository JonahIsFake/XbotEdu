import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.1.1" 
    id "eclipse"
    id "com.diffplug.eclipse.apt" version "3.42.2"
    id 'checkstyle'
    id 'jacoco'
    id 'org.hidetake.ssh' version "2.9.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "competition.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // jvmArgs <<
                    //     " -Dcom.sun.management.jmxremote=true" +
                    //     " -Dcom.sun.management.jmxremote.port=1099" +
                    //     " -Dcom.sun.management.jmxremote.local.only=false" +
                    //     " -Dcom.sun.management.jmxremote.ssl=false" +
                    //     " -Dcom.sun.management.jmxremote.authenticate=false" +
                    //     " -Djava.rmi.server.hostname=10.4.88.2"
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    jcenter()
    
    maven {
        url 'https://pkgs.dev.azure.com/Team488/2ef6eee3-1df0-441a-9af8-5edc5c3cb203/_packaging/XBot/maven/v1'
        name 'XBot'
    }

    maven {
        url "https://mvnrepository.com/artifact/com.google.dagger/dagger"
        url "https://mvnrepository.com/artifact/com.google.dagger/dagger-compiler"
    }
}

configurations {
    scl
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    scl group: 'xbot.common', name: 'SeriouslyCommonLib', version: '20230805.4'
    implementation configurations.scl.dependencies

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.json', name:'json', version: '20220924'

    implementation 'com.google.dagger:dagger:2.47'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.47'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.47'
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Our custom gradle stuff after this line

remotes {
    rio {
        host = 'roboRIO-488-frc.local'
        user = 'admin'
        knownHosts = allowAnyHosts
    }
}

task('copyResources') {
    doLast {
        ssh.run {
            session(remotes.rio) {
                // execute 'mkdir ~/449_resources', ignoreError: true
                // execute 'mkdir /488Logs', ignoreError: true
                put from: zipTree(configurations.scl.asPath).matching { include '**/log4j.xml' }, into: '/home/lvuser/'
                //execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r", ignoreError: true
            }
        }
    }
}

tasks.register('unpackCheckstyleConfigs', Copy) {
    dependsOn tasks.downloadDepsPreemptively

    from zipTree(configurations.scl.asPath).matching { include '*checkstyle*' }
    into layout.buildDirectory.dir("checkstyleConfig")
}

tasks.register('configureCheckstyle') {
    dependsOn tasks.unpackCheckstyleConfigs

    doLast {
        checkstyle.configFile = layout.buildDirectory.dir("checkstyleConfig").get().getAsFileTree().matching { include '**/xbotcheckstyle.xml' }.singleFile
        tasks.checkstyle.configProperties.basedir = layout.buildDirectory.dir("checkstyleConfig").get().getAsFile().path
    }
}

checkstyle {
    toolVersion = '10.6.0'
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    // Empty classpath
    classpath = files()
    dependsOn tasks.configureCheckstyle
}

test {
    reports {
        junitXml.required = true
    }               
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        logger.quiet "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

tasks.register('cleanGeneratedFiles': Delete) {
    delete "bin/generated-sources"
    delete "bin/generated-test-sources"
}

eclipse {
	// re-generate APT configuration on Gradle project synchronisation
	synchronizationTasks eclipseJdtApt, eclipseJdt, eclipseFactorypath

    autoBuildTasks tasks.cleanGeneratedFiles
    
project {

    natures "org.eclipse.buildship.core.gradleprojectnature"
    buildCommand "org.eclipse.buildship.core.gradleprojectbuilder"

    file {
      //closure executed after .project content is loaded from existing file
      //but before gradle build information is merged
      beforeMerged { project ->
        //if you want skip merging natures... (a very abstract example)
        project.natures.clear()
        project.buildCommands.clear()
      }

      //closure executed after .project content is loaded from existing file
      //and after gradle build information is merged
      whenMerged { project ->
      }
    }
}

    classpath {
      file {
            whenMerged {
                def genSource = entries.find { it.path == 'bin/generated-sources/annotations' }
                if (genSource) {
                    genSource.entryAttributes['ignore_optional_problems'] = 'true'
                }

                def genTestSource = entries.find { it.path == 'bin/generated-test-sources/annotations' }
                if (genTestSource) {
                    genTestSource.entryAttributes['ignore_optional_problems'] = 'true'
                }
            }
        }
    }
}

// always generate the coverage report after the tests run
test.finalizedBy { jacocoTestReport }